name: Build and Deploy

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    strategy:
      fail-fast: true
      max-parallel: 3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Install
        run: |
          yarn install

      - name: Build
        run: |
          yarn release

      - name: Get Change
        id: changes
        run: |
          echo "# ${{ github.ref }}" > changes.txt
          sed -n \
          "$(sed -n '/^## /=' CHANGELOG.md | sed -n '1'p),$(sed -n '/^## /=' CHANGELOG.md | sed -n '2'p)"p \
          CHANGELOG.md > tmp_changes.txt

          VERSION=$(head -1 tmp_changes.txt | cut -d '[' -f 2 | cut -d ']' -f 1)
          if [ "refs/tags/v$VERSION" != "${{ github.ref }}" ]; then
              echo $VERSION
              echo "${{ github.ref }}"
              echo "changelog version mismatch";
              exit 1;
          fi

          cat tmp_changes.txt | head -n -1 >> changes.txt
          echo ::set-output name=log::$(cat changes.txt)

      - name: Upload change
        uses: actions/upload-artifact@v2
        with:
          name: changes
          path: changes.txt

      - name: Artifact
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: package

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get Changes
        uses: actions/download-artifact@v2
        with:
          name: changes

      - name: Get deployment refs
        id: get_source
        run: |
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: changes.txt
          draft: false
          prerelease: false

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      source_tag: ${{ steps.get_source.outputs.SOURCE_TAG }}


  upload:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: package
          path: ProjectExportAPI

      - name: list path
        run: ls -l ProjectExportAPI

      - name: Compress folder
        run: tar -cvzf ProjectExportAPI.tar.gz ProjectExportAPI

      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ProjectExportAPI.tar.gz
          asset_name: ProjectExportAPI.tar.gz
          asset_content_type: application/zip
